{
 "cells": [
  {
   "cell_type": "code",
   "execution_count": 110,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Requirement already satisfied: nltk in /opt/conda/lib/python3.8/site-packages (3.5)\n",
      "Requirement already satisfied: regex in /opt/conda/lib/python3.8/site-packages (from nltk) (2020.10.11)\n",
      "Requirement already satisfied: click in /opt/conda/lib/python3.8/site-packages (from nltk) (7.1.2)\n",
      "Requirement already satisfied: joblib in /opt/conda/lib/python3.8/site-packages (from nltk) (0.16.0)\n",
      "Requirement already satisfied: tqdm in /opt/conda/lib/python3.8/site-packages (from nltk) (4.48.2)\n"
     ]
    }
   ],
   "source": [
    "! pip install nltk"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 5,
   "metadata": {},
   "outputs": [],
   "source": [
    "import os\n",
    "from nltk.tokenize import RegexpTokenizer\n",
    "from nltk.corpus import stopwords\n",
    "from nltk.stem.porter import PorterStemmer\n",
    "\n",
    "from sklearn.feature_extraction.text import TfidfVectorizer, CountVectorizer\n",
    "from sklearn.decomposition import NMF, LatentDirichletAllocation\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 13,
   "metadata": {},
   "outputs": [],
   "source": [
    "import pandas as pd"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 6,
   "metadata": {},
   "outputs": [],
   "source": [
    "def load_data(path,file_name):\n",
    "    \"\"\"\n",
    "    Input  : path and file_name\n",
    "    Purpose: loading text file\n",
    "    Output : list of paragraphs/documents and\n",
    "             title(initial 100 words considred as title of document)\n",
    "    \"\"\"\n",
    "    documents_list = []\n",
    "    titles=[]\n",
    "    with open( os.path.join(path, file_name) ,\"r\") as fin:\n",
    "        for line in fin.readlines():\n",
    "            text = line.strip()\n",
    "            documents_list.append(text)\n",
    "    print(\"Total Number of Documents:\",len(documents_list))\n",
    "    titles.append( text[0:min(len(text),100)] )\n",
    "    return documents_list,titles"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 24,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "topic_data.txt\ttopic_modeling.ipynb\r\n"
     ]
    }
   ],
   "source": [
    "!ls\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 7,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Total Number of Documents: 4551\n"
     ]
    }
   ],
   "source": [
    "docs, titles = load_data('/home/jovyan/git/topic_modeling'\n",
    ", 'topic_data.txt')"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 8,
   "metadata": {},
   "outputs": [],
   "source": [
    "def preprocess_data(doc_set):\n",
    "    \"\"\"\n",
    "    Input  : docuemnt list\n",
    "    Purpose: preprocess text (tokenize, removing stopwords, and stemming)\n",
    "    Output : preprocessed text\n",
    "    \"\"\"\n",
    "    # initialize regex tokenizer\n",
    "    tokenizer = RegexpTokenizer(r'\\w+')\n",
    "    # create English stop words list\n",
    "    en_stop = set(stopwords.words('english'))\n",
    "    # Create p_stemmer of class PorterStemmer\n",
    "    p_stemmer = PorterStemmer()\n",
    "    # list for tokenized documents in loop\n",
    "    texts = []\n",
    "    # loop through document list\n",
    "    for i in doc_set:\n",
    "        # clean and tokenize document string\n",
    "        raw = i.lower()\n",
    "        tokens = tokenizer.tokenize(raw)\n",
    "        # remove stop words from tokens\n",
    "        stopped_tokens = [i for i in tokens if not i in en_stop]\n",
    "        # stem tokens\n",
    "        stemmed_tokens = [p_stemmer.stem(i) for i in stopped_tokens]\n",
    "        # add tokens to list\n",
    "        stemmed_tokens = ' '.join(stemmed_tokens)\n",
    "        texts.append(stemmed_tokens)\n",
    "        \n",
    "    return texts"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 9,
   "metadata": {},
   "outputs": [],
   "source": [
    "prep_docs = preprocess_data(docs)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 10,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "4551"
      ]
     },
     "execution_count": 10,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "len(prep_docs)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 16,
   "metadata": {},
   "outputs": [],
   "source": [
    "def tfidf_vectorizer(prep_docs, n_features = 50, param_min_df = 2, param_max_df = 0.95):\n",
    "\n",
    "    print(\"Extracting tf-idf features ...\")\n",
    "    tfidf = TfidfVectorizer(max_df = param_max_df, min_df = param_min_df,\n",
    "                                       max_features=n_features,\n",
    "                                       stop_words='english')\n",
    "    # tfidf_vec_sparse = tfidf.fit_transform(docs)\n",
    "    tfidf_vec_sparse = tfidf.fit_transform(prep_docs)\n",
    "    feature_names = tfidf.get_feature_names()\n",
    "\n",
    "    return tfidf_vec_sparse, feature_names"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 17,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Extracting tf-idf features ...\n"
     ]
    },
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>ask</th>\n",
       "      <th>bank</th>\n",
       "      <th>brexit</th>\n",
       "      <th>campaign</th>\n",
       "      <th>chang</th>\n",
       "      <th>citi</th>\n",
       "      <th>clinton</th>\n",
       "      <th>come</th>\n",
       "      <th>countri</th>\n",
       "      <th>day</th>\n",
       "      <th>...</th>\n",
       "      <th>trump</th>\n",
       "      <th>uk</th>\n",
       "      <th>use</th>\n",
       "      <th>vote</th>\n",
       "      <th>want</th>\n",
       "      <th>way</th>\n",
       "      <th>week</th>\n",
       "      <th>work</th>\n",
       "      <th>world</th>\n",
       "      <th>year</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>0.290731</td>\n",
       "      <td>0.855437</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.109713</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.076709</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>...</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.075749</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.058920</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.737285</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.239646</td>\n",
       "      <td>...</td>\n",
       "      <td>0.487522</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.082145</td>\n",
       "      <td>0.108071</td>\n",
       "      <td>0.081123</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.000000</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.259301</td>\n",
       "      <td>0.320335</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>...</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.279841</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.292588</td>\n",
       "      <td>0.000000</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>0.046292</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.290619</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.052408</td>\n",
       "      <td>0.141971</td>\n",
       "      <td>0.036642</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.038455</td>\n",
       "      <td>...</td>\n",
       "      <td>0.586729</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.052025</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.041094</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.000000</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>0.046648</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.244046</td>\n",
       "      <td>0.171658</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.429190</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.091230</td>\n",
       "      <td>0.155004</td>\n",
       "      <td>...</td>\n",
       "      <td>0.650369</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.079698</td>\n",
       "      <td>0.104851</td>\n",
       "      <td>0.078705</td>\n",
       "      <td>0.072924</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.034682</td>\n",
       "      <td>0.124992</td>\n",
       "      <td>0.056722</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "<p>5 rows × 50 columns</p>\n",
       "</div>"
      ],
      "text/plain": [
       "        ask      bank  brexit  campaign     chang      citi   clinton  \\\n",
       "0  0.290731  0.855437     0.0  0.000000  0.000000  0.109713  0.000000   \n",
       "1  0.000000  0.000000     0.0  0.000000  0.000000  0.000000  0.737285   \n",
       "2  0.000000  0.000000     0.0  0.000000  0.000000  0.000000  0.000000   \n",
       "3  0.046292  0.000000     0.0  0.290619  0.000000  0.052408  0.141971   \n",
       "4  0.046648  0.000000     0.0  0.244046  0.171658  0.000000  0.429190   \n",
       "\n",
       "       come   countri       day  ...     trump   uk       use      vote  \\\n",
       "0  0.076709  0.000000  0.000000  ...  0.000000  0.0  0.000000  0.000000   \n",
       "1  0.000000  0.000000  0.239646  ...  0.487522  0.0  0.082145  0.108071   \n",
       "2  0.259301  0.320335  0.000000  ...  0.000000  0.0  0.279841  0.000000   \n",
       "3  0.036642  0.000000  0.038455  ...  0.586729  0.0  0.000000  0.052025   \n",
       "4  0.000000  0.091230  0.155004  ...  0.650369  0.0  0.079698  0.104851   \n",
       "\n",
       "       want       way      week      work     world      year  \n",
       "0  0.000000  0.075749  0.000000  0.000000  0.000000  0.058920  \n",
       "1  0.081123  0.000000  0.000000  0.000000  0.000000  0.000000  \n",
       "2  0.000000  0.000000  0.000000  0.000000  0.292588  0.000000  \n",
       "3  0.000000  0.000000  0.041094  0.000000  0.000000  0.000000  \n",
       "4  0.078705  0.072924  0.000000  0.034682  0.124992  0.056722  \n",
       "\n",
       "[5 rows x 50 columns]"
      ]
     },
     "execution_count": 17,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "# tfidf_vec_sparse = tfidf.fit_transform(docs)\n",
    "tfidf_vec_sparse, feature_names = tfidf_vectorizer(prep_docs, n_features = 50, param_min_df = 2, param_max_df = 0.95)\n",
    "\n",
    "tfidf_vec_df = pd.DataFrame(tfidf_vec_sparse.toarray(), \n",
    "                        columns=tfidf.get_feature_names())\n",
    "tfidf_vec_df.head()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "tfidf_vec_sparse.toarray().shape"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 50,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "LatentDirichletAllocation(learning_method='online', learning_offset=50.0,\n",
       "                          max_iter=5, random_state=0)"
      ]
     },
     "execution_count": 50,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "n_topics = 10\n",
    "from sklearn.decomposition import TruncatedSVD\n",
    "lsa = TruncatedSVD(n_components=n_topics, n_iter=100, random_state=42)\n",
    "lda = LatentDirichletAllocation(n_components=n_topics, max_iter=5,\n",
    "                                learning_method='online',\n",
    "                                learning_offset=50.,\n",
    "                                random_state=0)\n",
    "\n",
    "lsa.fit(tfidf_vec_sparse)\n",
    "lda.fit(tfidf_vec_sparse)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "lsa"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 51,
   "metadata": {},
   "outputs": [],
   "source": [
    "emd = lsa.transform(tfidf_vec_sparse.toarray())"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 52,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "(4551, 10)"
      ]
     },
     "execution_count": 52,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "emd.shape"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 20,
   "metadata": {},
   "outputs": [],
   "source": [
    "sing_vals = lsa.singular_values_"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 53,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "<matplotlib.axes._subplots.AxesSubplot at 0x7fcbf0a00460>"
      ]
     },
     "execution_count": 53,
     "metadata": {},
     "output_type": "execute_result"
    },
    {
     "data": {
      "image/png": "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\n",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "import seaborn as sns\n",
    "\n",
    "sns.barplot(x=list(range(len(sing_vals))), y = sing_vals)\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 32,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "(10, 50)"
      ]
     },
     "execution_count": 32,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "lsa.components_.shape"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 28,
   "metadata": {},
   "outputs": [],
   "source": [
    "def print_top_words(model, feature_names, n_top_words):\n",
    "    for topic_idx, topic in enumerate(model.components_):\n",
    "        message = \"Topic #%d: \" % topic_idx\n",
    "        message += \" \".join([feature_names[i]\n",
    "                             for i in topic.argsort()[:-n_top_words - 1:-1]])\n",
    "        print(message)\n",
    "    print()"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Exploratory Data Analysis (EDA)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 29,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Topic #0: said year like peopl say time film new trump work\n",
      "Topic #1: trump clinton said campaign vote state eu parti polit brexit\n",
      "Topic #2: bank eu uk brexit said govern vote leav report year\n",
      "Topic #3: bank film trump said clinton report includ year state new\n",
      "Topic #4: film eu brexit uk vote leav campaign govern parti said\n",
      "Topic #5: said report year includ peopl use need support govern ask\n",
      "Topic #6: play citi point said time eu end start look right\n",
      "Topic #7: year uk new includ world live report week citi govern\n",
      "Topic #8: citi say report govern peopl support point parti film need\n",
      "Topic #9: uk say play use trump eu includ citi good world\n",
      "\n"
     ]
    }
   ],
   "source": [
    "n_top_words = 10\n",
    "print_top_words(lsa, feature_names, n_top_words)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 54,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Topic #0: bank said year govern uk report new time includ say\n",
      "Topic #1: govern countri said peopl uk year need right support world\n",
      "Topic #2: say peopl like thing work year time know want think\n",
      "Topic #3: eu brexit vote uk said leav campaign govern peopl say\n",
      "Topic #4: trump clinton said state campaign vote peopl polit parti support\n",
      "Topic #5: play citi time point like said look year start good\n",
      "Topic #6: live like year new make end world way time come\n",
      "Topic #7: parti polit vote right brexit peopl chang work like new\n",
      "Topic #8: film play year new like work time make said world\n",
      "Topic #9: said year report use includ peopl new work uk time\n",
      "\n"
     ]
    }
   ],
   "source": [
    "n_top_words = 10\n",
    "print_top_words(lda, feature_names, n_top_words)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 58,
   "metadata": {},
   "outputs": [],
   "source": [
    "from sklearn.manifold import TSNE\n",
    "import matplotlib.pyplot as plt"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 56,
   "metadata": {},
   "outputs": [],
   "source": [
    "tsne = TSNE(n_components=2)\n",
    "tsne_emb = tsne.fit_transform(emd)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 65,
   "metadata": {},
   "outputs": [],
   "source": [
    "from nltk.tokenize import word_tokenize\n",
    "import string\n",
    "\n",
    "path='news_data'\n",
    "if not os.path.exists(path):\n",
    "    os.mkdir(path)\n",
    "\n",
    "url = \"https://archive.ics.uci.edu/ml/machine-learning-databases/20newsgroups-mld/20_newsgroups.tar.gz\"\n",
    "\n",
    "response = requests.get(url)\n",
    "name = os.path.basename(url)\n",
    "with open(os.path.join(path, name), 'bw') as f:\n",
    "    f.write(response.content)\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 77,
   "metadata": {},
   "outputs": [],
   "source": [
    "TEXT_DIR = 'news_data/20_newsgroups'"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 139,
   "metadata": {},
   "outputs": [],
   "source": [
    "news_topics = []\n",
    "new_text = []\n",
    "c= 0\n",
    "for names in sorted(os.listdir(TEXT_DIR)):\n",
    "    c+=1\n",
    "    path = os.path.join(TEXT_DIR, names)\n",
    "    if c < 3:\n",
    "        if os.path.isdir(path):\n",
    "            news_topics.append(names)\n",
    "            for fname in sorted(os.listdir(path)):\n",
    "                fpath = os.path.join(path, fname)\n",
    "                with open(fpath, 'rb') as f:\n",
    "                    t = f.read().decode('utf-8',errors='ignore')\n",
    "                    t = clean_text(t)\n",
    "                    new_text.append(t)\n",
    "                    \n",
    "    "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 141,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "'xref cantaloupesrvcscmuedu path cantaloupesrvcscmuedu crabapplesrvcscmuedu europaenggtefsdcom howlandrestonansnet agate netsys ibmpcug mantis mathew mathew mathew mantiscouk newsgroups altatheism altatheismmoderated newsanswers altanswers subject altatheism faq introduction atheism summary please read file posting altatheism keywords faq atheism messageid mantiscouk date mon apr gmt expires thu may gmt followupto altatheism distribution world organization mantis consultants cambridge uk approved newsanswersrequest mitedu supersedes mantiscouk lines archivename atheismintroduction altatheismarchivename introduction lastmodified april version begin pgp signed message introduction atheism mathew mathew mantiscouk article attempts provide general introduction atheism whilst tried neutral possible regarding contentious issues always remember document represents one viewpoint would encourage read widely draw conclusions relevant books listed companion article provide sense cohesion progression presented article imaginary conversation atheist theist questions asked imaginary theist questions cropped repeatedly altatheism since newsgroup created frequently asked questions answered companion article please note article arguably slanted towards answering questions posed christian viewpoint faq files reflect questions actually asked predominantly christians proselytize altatheism talk religion talking primarily religions christianity judaism islam involve sort superhuman divine much discussion apply religions may atheism atheism characterized absence belief existence god atheists go believe god exist former often referred weak atheist position latter strong atheism important note difference two positions weak atheism simple scepticism disbelief existence god strong atheism positive belief god exist please fall trap assuming atheists strong atheists atheists believe nonexistence gods others limit atheism specific gods christian god rather making flatout denials nt disbelieving god thing believing nt exist definitely disbelief proposition means one believe true believing something true equivalent believing false one may simply idea whether true brings us agnosticism agnosticism term agnosticism coined professor huxley meeting metaphysical society defined agnostic someone disclaimed strong atheism believed ultimate origin things must cause unknown unknowable thus agnostic someone believes know sure whether god exists words slippery things language inexact beware assuming work someone philosophical point view simply fact calls atheist agnostic example many people use agnosticism mean weak atheism use word atheism referring strong atheism beware also word atheist many shades meaning difficult generalize atheists say sure atheists nt believe god example certainly isnt case atheists believe science best way find universe philosophical justification basis atheism many philosophical justifications atheism find particular person chooses atheist best ask many atheists feel idea god presented major religions essentially selfcontradictory logically impossible god could exist others atheists scepticism see evidence god exists nt impossible prove nonexistence something many counterexamples statement example quite simple prove exist prime number larger prime numbers course deals welldefined objects obeying welldefined rules whether gods universes similarly welldefined matter debate however assuming moment existence god provably impossible still subtle reasons assuming nonexistence god assume something exist always possible show assumption invalid finding single counterexample hand assume something exist thing question provably impossible showing assumption invalid may require exhaustive search possible places thing might found show nt exhaustive search often impractical impossible problem largest primes prove nt exist therefore generally accepted must assume things exist unless evidence even theists follow rule time nt believe unicorns even though ca nt conclusively prove unicorns exist anywhere assume god exists make assumption probably tested make exhaustive search everywhere god might prove nt exist anywhere sceptical atheist assumes default god exist since assumption test profess strong atheism usually claim sort god exists instead generally restrict claims cover varieties god described followers various religions whilst may impossible prove conclusively god exists may possible prove say god described particular religious book exist may even possible prove god described presentday religion exists practice believing god described religion exists close believing god exists however sufficiently different counterarguments based impossibility disproving every kind god really applicable god essentially nondetectable god interacts universe way effects interaction must measurable hence interaction universe must detectable god essentially nondetectable must therefore case interact universe way many atheists would argue god interact universe importance whether exists bible believed god easily detectable israelites surely still detectable today note demanding god interact scientifically verifiable physical way must surely possible perceive effect caused presence though otherwise distinguish things nt exist ok may think philosophical justification atheism nt still religious belief one common pastimes philosophical discussion redefinition game cynical view game follows person begins making contentious statement person b points ca nt true person gradually redefines words used statement arrives something person b prepared accept records statement along fact person b agreed continues eventually uses statement agreed fact uses original definitions words rather obscure redefinitions originally needed get b agree rather seen apparently inconsistent b tend play along point digression answer question isnt atheism religious belief depends crucially upon meant religious religion generally characterized belief superhuman controlling power especially sort god faith worship worth pointing passing varieties buddhism religion according definition atheism certainly belief sort superhuman power categorized worship meaningful sense widening definition religious encompass atheism tends result many aspects human behaviour suddenly becoming classed religious well science politics watching tv ok religion surely belief atheism science still act faith like religion firstly entirely clear sceptical atheism something one actually believes secondly necessary adopt number core beliefs assumptions make sort sense sensory data experience atheists try adopt core beliefs possible even subject questioning experience throws doubt science number core assumptions example generally assumed laws physics observers sort core assumptions atheists make basic ideas called acts faith almost everything know must said based acts faith term loses meaning faith often used refer complete certain belief something according definition atheism science certainly acts faith course individual atheists scientists dogmatic religious followers claiming something certain general tendency however many atheists would reluctant state certainty universe exists faith also used refer belief without supporting evidence proof sceptical atheism certainly nt fit definition sceptical atheism beliefs strong atheism closer still nt really match even dogmatic atheist tend refer experimental data lack asserting god exist atheism religious surely antireligious unfortunate human tendency label everyone either friend enemy truth clearcut atheism position runs logically counter theism sense said antireligion however religious believers speak atheists antireligious usually mean atheists sort antipathy hatred towards theists categorization atheists hostile towards religion quite unfair atheist attitudes towards theists fact cover broad spectrum atheists take live let live attitude unless questioned usually mention atheism except perhaps close friends course may part atheism socially acceptable many countries atheists quite antireligious may even try convert others possible historically antireligious atheists made little impact society outside eastern bloc countries digress slightly soviet union originally dedicated separation church state like usa soviet citizens legally free worship wished institution state atheism came stalin took control soviet union tried destroy churches order gain complete power population atheists quite vocal beliefs see religion encroaching matters business example government usa individuals usually concerned church state remain separate nt allow religion say running state surely state atheism principle separation church state state shall legislate concerning matters religious belief particular means state promote one religion expense another also promote belief religious nature religions still say discussion purely secular matters example religious believers historically responsible encouraging many political reforms even today many organizations campaigning increase spending foreign aid founded religious campaigns long campaign concerning secular matters long discriminate religious grounds atheists quite happy see say prayer schools god care people pray people pray voters lawmakers tend things nt pray ca nt ignore also christian prayer schools intimidating nonchristians even told need join diversity religious nonreligious belief means impossible formulate meaningful prayer acceptable present public event also nonprayers tend friends family pray reasonable care friends family wasting time even without motives mentioned christians campaign increased foreign aid atheists nt atheist charities hospitals dont atheists object religious charities many charities without religious purpose atheists contribute atheists contribute religious charities well sake practical good atheists even voluntary work charities founded theistic basis atheists seem feel atheism nt worth shouting connection charity atheism simple obvious everyday matter charity many feel somewhat cheap say selfrighteous use simple charity excuse plug particular set religious beliefs weak atheists building hospital say believe god rather strange idea rather like holding party say today birthday fuss atheism rarely evangelical said atheism nt antireligious perhaps backlash one upbringing way rebelling perhaps many people parents attempt force religious atheist ideas upon many people choose call atheists also doubtless case religious people chose religion backlash atheist upbringing way different hand many people choose religion way conforming expectations others whole ca nt conclude much whether atheism religion backlash conformism although general people tendency go along group rather act think independently atheists differ religious people nt believe god atheists may listen heavy metal backwards even may prefer verdi requiem even know words may wear hawaiian shirts may dress black may even wear orange robes many buddhists lack belief sort god atheists even carry copy bible around arguing course whoever chances met several atheists without realising atheists usually unexceptional behaviour appearance unexceptional nt atheists less moral religious people depends define morality obedience god course atheists less moral nt obey god usually one talks morality one talks acceptable right unacceptable wrong behaviour within society humans social animals maximally successful must cooperate good enough reason discourage atheists antisocial immoral behaviour purely purposes selfpreservation many atheists behave moral compassionate way simply feel natural tendency empathize humans care happens others nt know simply way naturally people behave immorally try use atheism justify actions however equally many people behave immorally try use religious beliefs justify actions example trustworthy saying deserves full acceptance jesus christ came world save sinners reason shown mercy jesus christ might display unlimited patience example would believe receive eternal life king eternal immortal invisible god honor glory forever ever quote statement made court february jeffrey dahmer notorious cannibal serial killer milwaukee wisconsin seems every atheist massmurderer religious massmurderer trivial morality survey conducted roper organization found behavior deteriorated born experiences respondents said driven intoxicated born done conversion similarly used illegal drugs conversion two percent admitted engaging illicit sex salvation freethought today september p seems best religion monopoly moral behaviour thing atheist morality mean thing morality atheists answer yes explained many atheists ideas morality least strong held religious people mean atheism characteristic moral code answer atheism imply anything much person behave atheists follow many moral rules theists different reasons atheists view morality something created humans according way humans feel world ought work rather seeing set rules decreed supernatural nt atheists theists denying god study freedom religion foundation found atheists responded became atheists religion work found religious beliefs fundamentally incompatible observed around atheists unbelievers ignorance denial unbelievers choice vast majority spent time studying one religions sometimes great depth made careful considered decision reject religious beliefs decision may course inevitable consequence individual personality naturally sceptical person choice atheism often one makes sense hence choice person honestly make nt atheists want believe god atheists live lives though nobody watching many desire watched matter goodnatured big brother figure might atheists would like able believe god one believe things merely one wants true risks approach obvious atheists often decide wanting believe something enough must evidence belief course atheists see evidence existence god unwilling souls see many atheists previously religious explained vast majority seriously considered possibility god exists many atheists spent time prayer trying reach god course true atheists lack open mind assuming atheists biased insincere offensive closedminded comments course god nt looking properly likely viewed patronizing certainly wish engage philosophical debate atheists vital give benefit doubt assume sincere say searched god willing believe basically telling truth debate futile nt whole life completely pointless atheist many atheists live purposeful life decide think gives meaning life pursue goals try make lives count wishing eternal life influence people live example atheist may dedicate life political reform hope leaving mark history natural human tendency look meaning purpose random events however means obvious life sort thing meaning put another way everything looks like question actually sensible thing ask atheists believe asking meaning life silly asking meaning cup coffee believe life purpose meaning atheists find comfort time danger many ways obtaining comfort family friends even pets less spiritual level food drink tv may sound rather empty vulnerable way face danger individuals believe things comforting face reality matter harsh might end decision individual concerned atheists unable believe something would otherwise believe merely makes feel comfortable put truth comfort consider searching truth sometimes makes feel unhappy hard luck nt atheists worry might suddenly shown wrong short answer many atheists atheists years encountered many arguments much supposed evidence existence god found invalid inconclusive thousands years religious belief nt resulted good proof existence god atheists therefore tend feel unlikely proved wrong immediate future stop worrying theists question beliefs nt arguments apply beliefs questioned similar weak atheism sceptical default position take asserts nothing strong atheism negative belief theism strong positive belief atheists sometimes also argue theists question beliefs real harm cause believers everyone else sort harm religion represents huge financial work burden mankind matter religious believers wasting money church buildings think time effort spent building churches praying imagine effort could better spent many theists believe miracle healing plenty instances ill people healed priest ceasing take medicines prescribed doctors dying result theists died refused blood transfusions religious grounds arguable catholic church opposition birth control condoms particular increasing problem overpopulation many thirdworld countries contributing spread aids worldwide religious believers known murder children rather allow children become atheists marry someone different religion nt real believers claimed believers sort excuse makes real believer many one true religions hard tell look christianity many competing groups convinced true christians sometimes even fight kill atheist supposed decide real christian nt even major christian churches like catholic church church england ca nt decide amongst end atheists take pragmatic view decide anyone calls christian uses christian belief dogma justify actions considered christian maybe christians perverting christian teaching ends surely bible readily used support unchristian acts ca nt much moral code bible word god could nt made less easy misinterpret know beliefs nt perversion god intended single unambiguous interpretation bible atheist take one interpretation another sayso sorry someone claims believes jesus murdered others jesus bible told must call christian obviously extreme sorts beliefs questioned since nobody ever proved god exist must unlikely basic religious beliefs shared faiths nonsense hold pointed start dialogue positive assertions concerning existence entities inherently much harder disprove negative ones nobody ever proved unicorns nt exist nt make unlikely myths therefore much valid hold negative assertion default hold positive assertion default course weak atheists would argue asserting nothing better still well atheism great many theists unfortunately popularity belief little correct whether works consider many people believe astrology graphology pseudosciences many atheists feel simply human weakness want believe gods certainly many primitive human societies religion allows people deal phenomena adequately understand course religion industrialized world find people believing religious explanations phenomena even perfectly adequate natural explanations religion may started means attempting explain world nowadays serves purposes well many cultures developed religions surely must say something really religions superficially similar example worth remembering religions buddhism taoism lack sort concept god christian sense course religions quick denounce competing religions rather odd use one religion try justify another famous scientists philosophers concluded god exists every scientist philosopher believes god one besides already pointed truth belief determined many people believe also important realize atheists view famous scientists philosophers way theists view religious leaders famous scientist human may expert fields talks matters words carry special weight many respected scientists made look foolish speaking subjects lie outside fields expertise really saying widespread belief religion indicates nothing entirely certainly indicates religion question properties helped spread far theory memetics talks memes sets ideas propagate human minds analogy genes atheists view religions sets particularly successful parasitic memes spread encouraging hosts convert others memes avoid destruction discouraging believers questioning doctrine using peer pressure keep onetime believers admitting mistaken religious memes even encourage hosts destroy hosts controlled memes course memetic view particular virtue associated successful propagation meme religion good thing number people believe disease good thing number people caught even religion entirely true least puts across important messages fundamental messages atheism many important ideas atheists promote following nt surprised see ideas also present religions moral behaviour mindlessly following rules especially sceptical positive claims want life sort meaning find search true even makes uncomfortable make life probably one good relying external power change must change something popular nt mean good must assume something assume something easy test nt believe things want true finally importantly beliefs open question thanks taking time read article mathew begin pgp signature version end pgp signature information pgp send mail pgpinfo mantiscouk'"
      ]
     },
     "execution_count": 141,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "new_text[1]"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 137,
   "metadata": {},
   "outputs": [],
   "source": [
    "def clean_text(text):\n",
    "    # split into words\n",
    "    tokens = word_tokenize(text)\n",
    "    # convert to lower case\n",
    "    tokens = [w.lower() for w in tokens]\n",
    "    # remove punctuation from each word\n",
    "    table = str.maketrans('', '', string.punctuation)\n",
    "    stripped = [w.translate(table) for w in tokens]\n",
    "    # # remove remaining tokens that are not alphabetic\n",
    "    words = [word for word in stripped if word.isalpha()]\n",
    "    # # filter out stop words\n",
    "    from nltk.corpus import stopwords\n",
    "    stop_words = set(stopwords.words('english'))\n",
    "    words = [w for w in words if not w in stop_words]\n",
    "    words = ' '.join(words)\n",
    "    return words"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 138,
   "metadata": {},
   "outputs": [],
   "source": []
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": []
  },
  {
   "cell_type": "code",
   "execution_count": 114,
   "metadata": {},
   "outputs": [
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "[nltk_data] Downloading package punkt to /home/jovyan/nltk_data...\n",
      "[nltk_data]   Unzipping tokenizers/punkt.zip.\n"
     ]
    },
    {
     "data": {
      "text/plain": [
       "True"
      ]
     },
     "execution_count": 114,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "import nltk\n",
    "nltk.download('punkt')"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 60,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "<matplotlib.collections.PathCollection at 0x7fcbef531be0>"
      ]
     },
     "execution_count": 60,
     "metadata": {},
     "output_type": "execute_result"
    },
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "plt.scatter(tsne_emb[:,0], tsne_emb[:, 1])"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": []
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.8.5"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 4
}
